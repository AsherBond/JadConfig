package com.github.joschi.jadconfig.repositories;

import com.github.joschi.jadconfig.Repository;
import com.github.joschi.jadconfig.RepositoryException;

import java.io.*;
import java.util.Properties;

/**
 * {@link Repository} class providing access to a {@link Properties} backed configuration repository
 *
 * @author jschalanda
 */
public class PropertiesRepository implements Repository {

    private Properties properties = new Properties();
    private File propertiesFile = null;

    public PropertiesRepository(String filename) {

        if (filename == null || "".equals(filename)) {

            throw new IllegalArgumentException("Properties filename must not be null or empty!");
        }

        this.propertiesFile = new File(filename);
    }

    public PropertiesRepository(File propertiesFile) {

        if (propertiesFile == null) {

            throw new IllegalArgumentException("Properties file must not be null!");
        }

        this.propertiesFile = propertiesFile;
    }

    @Override
    public void open() throws RepositoryException {

        if (propertiesFile == null) {

            throw new RepositoryException("Properties file must not be null!");
        }

        if (!propertiesFile.exists()) {

            throw new RepositoryException("Properties file " + propertiesFile.getPath() + " doesn't exist!");
        }

        try {
            properties.load(new FileReader(propertiesFile));
        } catch (IOException ex) {
            throw new RepositoryException("Couldn't open properties file: " + propertiesFile, ex);
        }
    }

    @Override
    public String read(String name) {

        return properties.getProperty(name);
    }

    @Override
    public void write(String name, String value) throws RepositoryException {

        properties.put(name, value);
    }

    @Override
    public void save() throws RepositoryException {

        String comments = "Configuration automatically generated by JadConfig";

        try {
            Writer writer = new FileWriter(propertiesFile);
            properties.store(writer, comments);
        } catch (IOException ex) {
            throw new RepositoryException("Couldn't save properties to " + propertiesFile.getPath(), ex);
        }
    }

    @Override
    public void close() throws RepositoryException {
    }

    public File getPropertiesFile() {
        return propertiesFile;
    }

    public void setPropertiesFile(File propertiesFile) {
        this.propertiesFile = propertiesFile;
    }
}
